import os
import json
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from utils import get_user, update_user, load_json, save_json, add_user

router = Router()

GROUPS_FILE = "data/groups.json"

if not os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

def get_groups():
    return load_json(GROUPS_FILE)

def save_groups(data):
    save_json(GROUPS_FILE, data)

@router.message(Command("start_group"))
async def start_group_cmd(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    user = get_user(message.from_user.id)
    if not user:
        add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
        user = get_user(message.from_user.id)

    chat_id = str(message.chat.id)
    groups = get_groups()

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
    if chat_id in groups:
        # –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∫–æ–≤
        if message.from_user.id not in groups[chat_id]["users"]:
            groups[chat_id]["users"].append(message.from_user.id)
            save_groups(groups)
            await message.answer("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É.")
        else:
            await message.answer("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        return

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if user["points"] < 120:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–Ω—É–∂–Ω–æ 120).")
        return

    groups[chat_id] = {
        "users": [],
        "tasks": [],
        "confirmations": {}
    }
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º 1000 –æ—á–∫–æ–≤
    groups[chat_id]["users"].append(message.from_user.id)
    save_groups(groups)
    update_user(message.from_user.id, "points", user["points"] - 120)
    await message.answer(
        "üéâ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /join_group."
    )

@router.message(Command("help_group"))
async def help_group_cmd(message: Message):
    help_text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:\n\n"
        "/start_group ‚Äì –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º (—Ç—Ä–µ–±—É–µ—Ç—Å—è 1000 –æ—á–∫–æ–≤).\n"
        "/join_group ‚Äì –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≥—Ä—É–ø–ø–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É.\n"
        "/add_task <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –≥—Ä—É–ø–ø—É (–∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è).\n"
        "/group_tasks ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞.\n"
        "/group_tasks_by <username> ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.\n"
        "/done <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä; —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).\n"
        "/edit_task <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä).\n"
        "/delete_task <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä).\n"
        "/group_members ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.\n"
        "/leave_group ‚Äì –≤—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n"
        "/help_group ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
    )
    await message.answer(help_text)

@router.message(Command("join_group"))
async def join_group_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start_group")
        return

    if message.from_user.id in groups[chat_id]["users"]:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    groups[chat_id]["users"].append(message.from_user.id)
    save_groups(groups)
    if not get_user(message.from_user.id):
        add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ!")

@router.message(Command("add_task"))
async def add_group_task_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ /start_group")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_task")
        return
    task_text = parts[1].strip()
    groups[chat_id]["tasks"].append({
        "task": task_text,
        "done": False,
        "creator": message.from_user.id
    })
    save_groups(groups)
    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüëâ {task_text}")

@router.message(Command("group_tasks"))
async def group_tasks_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start_group")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return

    tasks = groups[chat_id]["tasks"]
    if not tasks:
        await message.answer("‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    task_list = "\n".join(
        f"{i+1}. {'‚úÖ' if task['done'] else '‚ùå'} {task['task']} (–æ—Ç {get_user(task['creator'])['name']})"
        for i, task in enumerate(tasks)
    )
    await message.answer(f"üìã –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:\n{task_list}")

from aiogram.filters import Command

@router.message(Command("group_tasks_by"))
async def group_tasks_by_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start_group")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /group_tasks_by <username –∏–ª–∏ –∏–º—è>")
        return

    args = parts[1].strip()
    if not args:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /group_tasks_by <username –∏–ª–∏ –∏–º—è>")
        return

    target_id = None
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ø–æ username (–±–µ–∑ @) –∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏
    for uid in groups[chat_id]["users"]:
        u = get_user(uid)
        if u:
            if u.get("username", "").lower() == args.lstrip("@").lower() or u["name"].lower() == args.lower():
                target_id = uid
                break

    if target_id is None:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    tasks = groups[chat_id]["tasks"]
    user_tasks = [(i, task) for i, task in enumerate(tasks) if task.get("creator") == target_id]
    if not user_tasks:
        await message.answer("‚ÑπÔ∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    task_list = "\n".join(
        f"{i+1}. {'‚úÖ' if task['done'] else '‚ùå'} {task['task']}"
        for i, task in user_tasks
    )
    target = get_user(target_id)
    await message.answer(f"üìã –ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target['name']}:\n{task_list}")

@router.message(Command("done"))
async def group_done_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /done")
        return
    try:
        task_index = int(parts[1].strip()) - 1
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    if not (0 <= task_index < len(groups[chat_id]["tasks"])):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    task = groups[chat_id]["tasks"][task_index]
    if message.from_user.id != task.get("creator"):
        await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return
    confirmations = groups[chat_id]["confirmations"].setdefault(str(task_index), [])
    if message.from_user.id in confirmations:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.")
        return
    else:
        confirmations.append(message.from_user.id)
    if len(set(confirmations)) >= (len(groups[chat_id]["users"]) + 1) // 2:
        groups[chat_id]["tasks"][task_index]["done"] = True
        for user_id in groups[chat_id]["users"]:
            update_user(user_id, "points", get_user(user_id)["points"] + 5)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task['task']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +5 –æ—á–∫–æ–≤.")
    else:
        await message.answer("üïì –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    save_groups(groups)

@router.message(Command("edit_task"))
async def edit_group_task_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ /start_group")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /edit_task <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
        return
    try:
        task_index = int(parts[1].strip()) - 1
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    new_text = parts[2].strip()
    if not (3 <= len(new_text) <= 100):
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if not (0 <= task_index < len(groups[chat_id]["tasks"])):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    task = groups[chat_id]["tasks"][task_index]
    if message.from_user.id != task.get("creator"):
        await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    task["task"] = new_text
    save_groups(groups)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_index+1} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.")

@router.message(Command("delete_task"))
async def delete_group_task_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ /start_group")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /delete_task <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>")
        return
    try:
        task_index = int(parts[1].strip()) - 1
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    if not (0 <= task_index < len(groups[chat_id]["tasks"])):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return
    task = groups[chat_id]["tasks"][task_index]
    if message.from_user.id != task.get("creator"):
        await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –µ—ë —É–¥–∞–ª–∏—Ç—å.")
        return
    groups[chat_id]["tasks"].pop(task_index)
    if str(task_index) in groups[chat_id]["confirmations"]:
        del groups[chat_id]["confirmations"][str(task_index)]
    save_groups(groups)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_index+1} —É–¥–∞–ª–µ–Ω–∞.")

@router.message(Command("group_members"))
async def group_members_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    if message.from_user.id not in groups[chat_id]["users"]:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ /join_group")
        return

    members = groups[chat_id]["users"]
    if not members:
        await message.answer("‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    members_text = "\n".join(
        f"{i + 1}. {get_user(member)['name']} {f'(@{get_user(member)['username']})' if get_user(member).get('username') else ''}"
        for i, member in enumerate(members)
    )
    await message.answer(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:\n{members_text}")

@router.message(Command("leave_group"))
async def leave_group_cmd(message: Message):
    groups = get_groups()
    chat_id = str(message.chat.id)
    if chat_id not in groups:
        await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return

    if message.from_user.id in groups[chat_id]["users"]:
        groups[chat_id]["users"].remove(message.from_user.id)
        save_groups(groups)
        await message.answer("‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º.")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.")
