from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils import (
    add_user, load_json, get_user, add_task, complete_task, update_user,
    delete_task, edit_task, update_last_activity, get_tasks_with_overdue_check
)

router = Router()

def get_solo_keyboard(lang="ru"):
    if lang == "en":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï Add Task"), KeyboardButton(text="üìã My Tasks")],
                [KeyboardButton(text="‚úÖ Complete Task"), KeyboardButton(text="üóë Delete Task")],
                [KeyboardButton(text="‚úèÔ∏è Edit Task"), KeyboardButton(text="üèÜ Leaderboard")],
                [KeyboardButton(text="üåê Language")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")],
                [KeyboardButton(text="üåê –Ø–∑—ã–∫")]
            ],
            resize_keyboard=True
        )

def get_translation(lang, key):
    translations = {
        "welcome_message": {
            "ru": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
            "en": "Hello! Welcome to our task management bot."
        },
        "instruction_message": {
            "ru": (
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.\n\n"
                "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ª–∏–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫, –ª–∏–±–æ —Å–∏–º–≤–æ–ª–æ–º ';'.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\n–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ;–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
                "–ó–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ—á–∞—Ç—å –∏—Ö –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏."
            ),
            "en": (
                "To get started, add a new task by pressing the '‚ûï Add Task' button.\n\n"
                "You can also send multiple tasks in one message, separated by new lines or a semicolon ';'.\n"
                "For example:\nBuy bread\nCall mom;Do homework\n\n"
                "Then you'll be able to view your tasks, mark them as completed, and earn points."
            )
        },
        "next_steps_message": {
            "ru": (
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –≤–æ—Ç –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
                "- 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ).\n"
                "- '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É' –¥–ª—è +10 –æ—á–∫–æ–≤.\n"
                "- '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' –∏–ª–∏ 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'.\n\n"
                "–î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: –Ω–∞–±–µ—Ä–∏ 120 –æ—á–∫–æ–≤ –∏ /start_group.\n"
                "–ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º: —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –¥—Ä—É–∑—å—è–º–∏.\n\n"
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî /help."
            ),
            "en": (
                "Additionally, here are some features:\n"
                "- 'üìã My Tasks' to see incomplete and completed tasks.\n"
                "- '‚úÖ Complete Task' to earn +10 points.\n"
                "- '‚úèÔ∏è Edit Task' or 'üóë Delete Task' to modify or remove tasks.\n\n"
                "For group mode: accumulate 120 points and use /start_group.\n"
                "Group mode: collaborate with friends.\n\n"
                "If you need help ‚Äî type /help."
            )
        },
        "already_registered": {
            "ru": "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            "en": "You are already registered!"
        },
        "ask_task_text": {
            "ru": "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á–∏ (–∫–∞–∂–¥—É—é –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ ';').",
            "en": "Send your tasks (each on a new line or separated by ';')."
        },
        "task_length_error": {
            "ru": "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            "en": "Task text must be 3‚Äì100 characters. Please try again."
        },
        "task_added": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            "en": "‚úÖ Task added!"
        },
        "no_tasks": {
            "ru": "‚ÑπÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            "en": "‚ÑπÔ∏è You have no tasks yet."
        },
        "your_tasks": {
            "ru": "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n",
            "en": "üìã *Your Tasks:*\n"
        },
        "ask_task_number_complete": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª.",
            "en": "Enter the task number you completed."
        },
        "task_completed": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +10 –æ—á–∫–æ–≤!",
            "en": "‚úÖ Task completed! +10 points!"
        },
        "error_task_number": {
            "ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.",
            "en": "‚ö†Ô∏è Error! Check the task number."
        },
        "ask_task_number_delete": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.",
            "en": "Enter the task number you want to delete."
        },
        "task_deleted": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!",
            "en": "‚úÖ Task deleted!"
        },
        "ask_task_number_edit": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            "en": "Enter the task number you want to edit."
        },
        "ask_new_task_text": {
            "ru": "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            "en": "Now enter the new task text."
        },
        "task_edited": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!",
            "en": "‚úÖ Task successfully edited!"
        },
        "error_editing": {
            "ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.",
            "en": "‚ö†Ô∏è Error editing. Check the task number."
        },
        "welcome_message": {
            "ru": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
            "en": "Hello! Welcome to our task management bot."
        },
        "instruction_message": {
            "ru": "–ó–¥–µ—Å—å –º–æ–≥–ª–∏ –±—ã—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–æ —É–∂–µ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üòâ",
            "en": "Here could be more instructions, but it's quite straightforward üòâ"
        }
    }
    return translations.get(key, {}).get(lang, "")

class TaskState(StatesGroup):
    add = State()
    complete = State()
    delete = State()
    edit_index = State()
    edit_text = State()

@router.message(F.text.in_(["/help"]))
async def help_cmd(message: Message):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"] if user else "ru"
    await message.answer(get_translation(lang, "instruction_message"))

@router.message(F.text.in_(["/start"]))
async def start_cmd(message: Message):
    user_created = add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    solo_kb = get_solo_keyboard(lang)

    if user_created:
        await message.answer(get_translation(lang, "welcome_message"), reply_markup=solo_kb)
        await message.answer(get_translation(lang, "instruction_message"))
        await message.answer(get_translation(lang, "next_steps_message"))
    else:
        await message.answer(get_translation(lang, "already_registered"), reply_markup=solo_kb)

@router.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚ûï Add Task"]))
async def add_task_cmd(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"] if user else "ru"
    await message.answer(get_translation(lang, "ask_task_text"))
    await state.set_state(TaskState.add)

@router.message(TaskState.add)
async def process_add_task(message: Message, state: FSMContext):
    # –û–±–Ω–æ–≤–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"] if user else "ru"

    raw = message.text.strip()
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–∏–ª–∏ –Ω–∞ ; )
    # —Ç–∞–∫ –∂–µ, –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    lines = []
    for line in raw.split('\n'):
        if ';' in line:
            for part in line.split(';'):
                t = part.strip()
                if t:
                    lines.append(t)
        else:
            if line.strip():
                lines.append(line.strip())

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –Ω–µ—Ç —Å—Ç—Ä–æ–∫ ‚Äì –æ—à–∏–±–∫–∞
    if not lines:
        await message.answer(get_translation(lang, "task_length_error"))
        return

    added_tasks = []
    for line in lines:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å 3 —á–∞—Å—Ç–∏: 
        #   text | deadline | status
        parts = [p.strip() for p in line.split('|')]
        
        # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å—Ç—å (—Ç–µ–∫—Å—Ç)
        text = parts[0] if len(parts) >= 1 else ""
        deadline = parts[1] if len(parts) >= 2 else ""
        status = parts[2] if len(parts) >= 3 else ""

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if len(text) < 3 or len(text) > 100:
            continue
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if not status:
            status = "–ù–æ–≤–∞—è" if lang == "ru" else "New"

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª)
        # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ
        if deadline:
            from datetime import datetime
            try:
                datetime.strptime(deadline, "%Y-%m-%d %H:%M")
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            except ValueError:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω 
                # –∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ–≤–µ—Ä–µ–Ω
                deadline = ""

        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –∑–∞–¥–∞—á—É
        add_task(
            user_id=message.from_user.id,
            task_text=text,
            status=status,
            deadline=deadline
        )
        added_tasks.append(text)

    # –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞, –ø—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    if added_tasks:
        if len(added_tasks) == 1:
            # –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞
            await message.answer(get_translation(lang, "task_added"))
        else:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ
            joined = ", ".join(added_tasks[:5])
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {len(added_tasks)}. –ü—Ä–∏–º–µ—Ä: {joined}")
    else:
        # –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
        await message.answer(get_translation(lang, "task_length_error"))

    # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(F.text.in_(["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üìã My Tasks"]))
async def my_tasks(message: Message):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"] if user else "ru"

    tasks = get_tasks_with_overdue_check(message.from_user.id)
    if not tasks:
        await message.answer(get_translation(lang, "no_tasks"))
        return

    incomplete_tasks = []
    completed_tasks = []
    for i, task in enumerate(tasks):
        if task.get("done"):
            completed_tasks.append((i, task))
        else:
            incomplete_tasks.append((i, task))

    display_text = ""
    if incomplete_tasks:
        if lang == "en":
            display_text += "‚ùå Incomplete Tasks:\n"
        else:
            display_text += "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in incomplete_tasks:
            st = task.get("status", "–ù–æ–≤–∞—è")
            dl = task.get("deadline", "")
            display_text += f"{idx+1}. {task['task']} [{st}]"
            if dl:
                display_text += f" (deadline: {dl})"
            display_text += "\n"

    if completed_tasks:
        display_text += "\n"
        if lang == "en":
            display_text += "‚úÖ Completed Tasks:\n"
        else:
            display_text += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in completed_tasks:
            st = task.get("status", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
            dl = task.get("deadline", "")
            display_text += f"{idx+1}. {task['task']} [{st}]"
            if dl:
                display_text += f" (deadline: {dl})"
            display_text += "\n"

    await message.answer(f"{get_translation(lang, 'your_tasks')}{display_text}", parse_mode="Markdown")

@router.message(F.text.in_(["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ Complete Task"]))
async def done_task_cmd(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    await message.answer(get_translation(lang, "ask_task_number_complete"))
    await state.set_state(TaskState.complete)

@router.message(TaskState.complete, F.text.regexp(r"^\d+$"))
async def complete_task_cmd(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    idx = int(message.text) - 1

    if complete_task(message.from_user.id, idx):
        user_data = get_user(message.from_user.id)
        update_user(message.from_user.id, "points", user_data["points"] + 10)
        await message.answer(get_translation(lang, "task_completed"))
    else:
        await message.answer(get_translation(lang, "error_task_number"))
    await state.clear()

@router.message(F.text.in_(["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë Delete Task"]))
async def delete_task_prompt(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    await message.answer(get_translation(lang, "ask_task_number_delete"))
    await state.set_state(TaskState.delete)

@router.message(TaskState.delete, F.text.regexp(r"^\d+$"))
async def delete_task_cmd_handler(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    idx = int(message.text) - 1

    if delete_task(message.from_user.id, idx):
        await message.answer(get_translation(lang, "task_deleted"))
    else:
        await message.answer(get_translation(lang, "error_task_number"))
    await state.clear()

@router.message(F.text.in_(["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", "‚úèÔ∏è Edit Task"]))
async def edit_task_cmd(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    user = get_user(message.from_user.id)
    lang = user["language"]
    await message.answer(get_translation(lang, "ask_task_number_edit"))
    await state.set_state(TaskState.edit_index)

@router.message(TaskState.edit_index, F.text.regexp(r"^\d+$"))
async def get_task_index_for_edit(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    idx = int(message.text) - 1
    await state.update_data(task_index=idx)
    user = get_user(message.from_user.id)
    lang = user["language"]
    await message.answer(get_translation(lang, "ask_new_task_text"))
    await state.set_state(TaskState.edit_text)

@router.message(TaskState.edit_text)
async def edit_task_text_handler(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    data = await state.get_data()
    idx = data.get("task_index")
    new_text = message.text.strip()
    user = get_user(message.from_user.id)
    lang = user["language"]

    if edit_task(message.from_user.id, idx, new_text):
        await message.answer(get_translation(lang, "task_edited"))
    else:
        await message.answer(get_translation(lang, "error_editing"))
    await state.clear()
