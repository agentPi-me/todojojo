from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils import add_user, load_json, get_user, add_task, complete_task, update_user, delete_task, edit_task

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
def get_solo_keyboard(lang="ru"):
    if lang == "en":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï Add Task"), KeyboardButton(text="üìã My Tasks")],
                [KeyboardButton(text="‚úÖ Complete Task"), KeyboardButton(text="üóë Delete Task")],
                [KeyboardButton(text="‚úèÔ∏è Edit Task"), KeyboardButton(text="üèÜ Leaderboard")],
                [KeyboardButton(text="üåê Language")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")],
                [KeyboardButton(text="üåê –Ø–∑—ã–∫")]
            ],
            resize_keyboard=True
        )

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ —è–∑—ã–∫–∞
def get_translation(lang, key):
    translations = {
        "welcome_message": {
            "ru": "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.",
            "en": "Hello! Welcome to our task management bot."
        },
        "instruction_message": {
            "ru": (
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'.\n\n"
                "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å–ø–∏—Å–∫–æ–º, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º ';'. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "–ö—É–ø–∏—Ç—å —Ö–ª–µ–±; –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ; –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
                "–ó–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ—á–∞—Ç—å –∏—Ö –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏."
            ),
            "en": (
                "To get started, add a new task by pressing the '‚ûï Add Task' button.\n\n"
                "You can also send multiple tasks in one message, separated by a semicolon ';'. For example:\n"
                "Buy bread; Call mom; Do homework\n\n"
                "Then you'll be able to view your tasks, mark them as completed, and earn points."
            )
        },
        "next_steps_message": {
            "ru": (
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –≤–æ—Ç –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
                "- –ù–∞–∂–º–∏ 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–æ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ).\n"
                "- –ù–∞–∂–º–∏ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –ø–æ–ª—É—á–∏—Ç—å +10 –æ—á–∫–æ–≤.\n"
                "- –ù–∞–∂–º–∏ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' –∏–ª–∏ 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n\n"
                "–î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å 120 –æ—á–∫–æ–≤ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start_group. "
                "–ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –¥—Ä—É–∑—å—è–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.\n\n"
                "–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏ /help."
            ),
            "en": (
                "Additionally, here are some extra features:\n"
                "- Press 'üìã My Tasks' to view your tasks (they are separated into incomplete and completed).\n"
                "- Press '‚úÖ Complete Task' to mark a task as completed and earn +10 points.\n"
                "- Use '‚úèÔ∏è Edit Task' or 'üóë Delete Task' to modify or delete a task.\n\n"
                "For group mode: To activate it, you need to accumulate 120 points and use the /start_group command. "
                "Group mode lets you work together with friends: add group tasks, view members, confirm task completion, etc.\n\n"
                "If you need help, type /help."
            )
        },
        "start_registered": {
            "ru": "üëã –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
            "en": "üëã You have successfully registered."
        },
        "already_registered": {
            "ru": "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            "en": "You are already registered!"
        },
        "help": {
            "ru": (
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ –≤ Solo —Ä–µ–∂–∏–º–µ:\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "  /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
                "  ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º ';'.\n"
                "  üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.\n"
                "  ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –ø–æ–ª—É—á–∏—Ç—å +10 –æ—á–∫–æ–≤.\n"
                "  üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É.\n"
                "  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, —É–∫–∞–∑–∞–≤ –µ—ë –Ω–æ–º–µ—Ä.\n"
                "  üèÜ –†–µ–π—Ç–∏–Ω–≥ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                "  üåê –Ø–∑—ã–∫ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.\n\n"
                "–ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º:\n"
                "  –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 120 –æ—á–∫–æ–≤ –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start_group.\n"
                "  –í –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á,\n"
                "  –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã.\n\n"
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "- –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∑–∞–¥–∞—á–∏ —Å–∏–º–≤–æ–ª–æ–º ';'.\n"
                "- –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç–∞–∫ –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
            ),
            "en": (
                "Instructions for the bot in Solo mode:\n\n"
                "Commands:\n"
                "  /start ‚Äî register with the bot and display detailed instructions.\n"
                "  ‚ûï Add Task ‚Äî add a new task. You can send multiple tasks in one message separated by ';'.\n"
                "  üìã My Tasks ‚Äî view your tasks, separated into incomplete and completed tasks.\n"
                "  ‚úÖ Complete Task ‚Äî mark a task as completed and earn +10 points.\n"
                "  üóë Delete Task ‚Äî delete a task by its number.\n"
                "  ‚úèÔ∏è Edit Task ‚Äî modify a task by specifying its number.\n"
                "  üèÜ Leaderboard ‚Äî view the user rankings.\n"
                "  üåê Language ‚Äî change the interface language.\n\n"
                "Group mode:\n"
                "  To activate group mode, you need to accumulate at least 120 points and use the /start_group command.\n"
                "  In group mode, you can join a group, add, edit, or delete group tasks, and confirm task completion by group members.\n\n"
                "Additional features:\n"
                "- You can send a list of tasks in one message, separating them with ';'.\n"
                "- All commands work in both Russian and English."
            )
        },
        "ask_task_text": {
            "ru": "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            "en": "Send me the task text."
        },
        "task_length_error": {
            "ru": "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            "en": "Task text must be between 3 and 100 characters. Please try again."
        },
        "task_added": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            "en": "‚úÖ Task added!"
        },
        "no_tasks": {
            "ru": "‚ÑπÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.",
            "en": "‚ÑπÔ∏è You have no tasks yet."
        },
        "your_tasks": {
            "ru": "üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n",
            "en": "üìã *Your Tasks:*\n"
        },
        "ask_task_number_complete": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª.",
            "en": "Enter the number of the task you completed."
        },
        "task_completed": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +10 –æ—á–∫–æ–≤!",
            "en": "‚úÖ Task completed! +10 points!"
        },
        "error_task_number": {
            "ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.",
            "en": "‚ö†Ô∏è Error! Check the task number."
        },
        "ask_task_number_delete": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.",
            "en": "Enter the number of the task you want to delete."
        },
        "task_deleted": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!",
            "en": "‚úÖ Task deleted!"
        },
        "ask_task_number_edit": {
            "ru": "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.",
            "en": "Enter the number of the task you want to edit."
        },
        "ask_new_task_text": {
            "ru": "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.",
            "en": "Now, enter the new task text."
        },
        "task_edited": {
            "ru": "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!",
            "en": "‚úÖ Task successfully edited!"
        },
        "error_editing": {
            "ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.",
            "en": "‚ö†Ô∏è Error editing task. Check the task number."
        }
    }
    return translations.get(key, {}).get(lang, translations.get(key, {}).get("ru", ""))

class TaskState(StatesGroup):
    add = State()
    complete = State()
    delete = State()
    edit_index = State()
    edit_text = State()

@router.message(F.text.in_(["/help"]))
async def help_cmd(message: Message):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    help_text = get_translation(lang, "help")
    await message.answer(help_text)

@router.message(F.text.in_(["/start"]))
async def start_cmd(message: Message):
    username = message.from_user.username
    user_created = add_user(message.from_user.id, message.from_user.full_name, username)
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    solo_kb = get_solo_keyboard(lang)
    if user_created:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await message.answer(get_translation(lang, "welcome_message"), reply_markup=solo_kb)
        await message.answer(get_translation(lang, "instruction_message"))
        await message.answer(get_translation(lang, "next_steps_message"))
    else:
        await message.answer(get_translation(lang, "already_registered"), reply_markup=solo_kb)

@router.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚ûï Add Task"]))
async def add_task_cmd(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    await message.answer(get_translation(lang, "ask_task_text"))
    await state.set_state(TaskState.add)

@router.message(TaskState.add)
async def process_add_task(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    task_text = message.text.strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º ';'
    if ";" in task_text:
        tasks_list = [t.strip() for t in task_text.split(";") if t.strip()]
        added = []
        for t in tasks_list:
            if 3 <= len(t) <= 100:
                add_task(message.from_user.id, t)
                added.append(t)
        if added:
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏: " + ", ".join(added))
        else:
            await message.answer(get_translation(lang, "task_length_error"))
        await state.clear()
        return

    if not (3 <= len(task_text) <= 100):
        await message.answer(get_translation(lang, "task_length_error"))
        return

    add_task(message.from_user.id, task_text)
    await message.answer(get_translation(lang, "task_added"))
    await state.clear()

@router.message(F.text.in_(["üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üìã My Tasks"]))
async def my_tasks(message: Message):
    user_id = str(message.from_user.id)
    tasks = load_json("data/tasks.json")
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"

    if user_id not in tasks or not tasks[user_id]:
        await message.answer(get_translation(lang, "no_tasks"))
        return

    incomplete_tasks = []
    completed_tasks = []
    for i, task in enumerate(tasks[user_id]):
        if task.get("done"):
            completed_tasks.append((i, task))
        else:
            incomplete_tasks.append((i, task))
    display_text = ""
    if incomplete_tasks:
        if lang == "en":
            display_text += "‚ùå Incomplete Tasks:\n"
        else:
            display_text += "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in incomplete_tasks:
            display_text += f"{idx+1}. {task['task']}\n"
    if completed_tasks:
        display_text += "\n"
        if lang == "en":
            display_text += "‚úÖ Completed Tasks:\n"
        else:
            display_text += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in completed_tasks:
            display_text += f"{idx+1}. {task['task']}\n"

    await message.answer(f"{get_translation(lang, 'your_tasks')}\n{display_text}", parse_mode="Markdown")

@router.message(F.text.in_(["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "‚úÖ Complete Task"]))
async def done_task_cmd(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    await message.answer(get_translation(lang, "ask_task_number_complete"))
    await state.set_state(TaskState.complete)

@router.message(TaskState.complete, F.text.regexp(r"^\d+$"))
async def complete_task_cmd(message: Message, state: FSMContext):
    from utils import complete_task, get_user, update_user
    task_index = int(message.text) - 1
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    if complete_task(message.from_user.id, task_index):
        user_data = get_user(message.from_user.id)
        update_user(message.from_user.id, "points", user_data["points"] + 10)
        await message.answer(get_translation(lang, "task_completed"))
    else:
        await message.answer(get_translation(lang, "error_task_number"))
    await state.clear()

@router.message(F.text.in_(["üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë Delete Task"]))
async def delete_task_prompt(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    await message.answer(get_translation(lang, "ask_task_number_delete"))
    await state.set_state(TaskState.delete)

@router.message(TaskState.delete, F.text.regexp(r"^\d+$"))
async def delete_task_cmd(message: Message, state: FSMContext):
    from utils import delete_task
    task_index = int(message.text) - 1
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    if delete_task(message.from_user.id, task_index):
        await message.answer(get_translation(lang, "task_deleted"))
    else:
        await message.answer(get_translation(lang, "error_task_number"))
    await state.clear()

@router.message(F.text.in_(["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", "‚úèÔ∏è Edit Task"]))
async def edit_task_cmd(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    await message.answer(get_translation(lang, "ask_task_number_edit"))
    await state.set_state(TaskState.edit_index)

@router.message(TaskState.edit_index, F.text.regexp(r"^\d+$"))
async def get_task_index_for_edit(message: Message, state: FSMContext):
    task_index = int(message.text) - 1
    await state.update_data(task_index=task_index)
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"
    await message.answer(get_translation(lang, "ask_new_task_text"))
    await state.set_state(TaskState.edit_text)

@router.message(TaskState.edit_text)
async def edit_task_text(message: Message, state: FSMContext):
    from utils import edit_task
    data = await state.get_data()
    task_index = data.get("task_index")
    new_text = message.text.strip()
    user = get_user(message.from_user.id)
    lang = user.get("language", "ru") if user else "ru"

    if edit_task(message.from_user.id, task_index, new_text):
        await message.answer(get_translation(lang, "task_edited"))
    else:
        await message.answer(get_translation(lang, "error_editing"))
    await state.clear()
