from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from utils import add_user, load_json

class TaskState(StatesGroup):
    add = State()
    complete = State()
    delete = State()
    edit_index = State()
    edit_text = State()

router = Router()

solo_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
    [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
    [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
], resize_keyboard=True)

@router.message(F.text == "/help")
async def help_cmd(message: Message):
    help_text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ –≤ Solo —Ä–µ–∂–∏–º–µ:\n\n"
        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á\n"
        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äì –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏ –ø–æ–ª—É—á–∏—Ç—å +10 –æ—á–∫–æ–≤\n"
        "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏\n"
        "üèÜ –†–µ–π—Ç–∏–Ω–≥ ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(help_text)

@router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def leaderboard_cmd(message: Message):
    users = load_json("data/users.json")
    sorted_users = sorted(users.items(), key=lambda x: x[1]["points"], reverse=True)

    text = "\n".join(
        f"{i+1}. {user_data['name']} "
        f"{f'(@{user_data['username']}) ' if user_data.get('username') else ''}"
        f"‚Äì {user_data['points']} –æ—á–∫–æ–≤ "
        f"{'(–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)' if user_data.get('group_access') else '(solo)'}"
        for i, (_, user_data) in enumerate(sorted_users)
    )

    await message.answer(f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{text}")

@router.message(F.text == "/start")
async def start_cmd(message: Message):
    username = message.from_user.username

    if add_user(message.from_user.id, message.from_user.full_name, username):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=solo_kb)
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=solo_kb)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_cmd(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
    await state.set_state(TaskState.add)

@router.message(TaskState.add)
async def process_add_task(message: Message, state: FSMContext):
    task_text = message.text.strip()
    if not (3 <= len(task_text) <= 100):
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    from utils import add_task
    add_task(message.from_user.id, task_text)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks(message: Message):
    user_id = str(message.from_user.id)
    tasks = load_json("data/tasks.json")

    if user_id not in tasks or not tasks[user_id]:
        await message.answer("‚ÑπÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    task_list = "\n".join([
        f"{idx + 1}. {'‚úÖ' if task['done'] else '‚ùå'} {task['task']}"
        for idx, task in enumerate(tasks[user_id])
    ])
    await message.answer(f"üìã *–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n{task_list}", parse_mode="Markdown")

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def done_task_cmd(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª.")
    await state.set_state(TaskState.complete)

@router.message(TaskState.complete, F.text.regexp(r"^\d+$"))
async def complete_task_cmd(message: Message, state: FSMContext):
    from utils import complete_task, get_user, update_user
    task_index = int(message.text) - 1
    if complete_task(message.from_user.id, task_index):
        user_data = get_user(message.from_user.id)
        update_user(message.from_user.id, "points", user_data["points"] + 10)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +10 –æ—á–∫–æ–≤!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    await state.clear()

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task_prompt(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
    await state.set_state(TaskState.delete)

@router.message(TaskState.delete, F.text.regexp(r"^\d+$"))
async def delete_task_cmd(message: Message, state: FSMContext):
    from utils import delete_task
    task_index = int(message.text) - 1
    if delete_task(message.from_user.id, task_index):
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    await state.clear()


@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
async def edit_task_cmd(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
    await state.set_state(TaskState.edit_index)


@router.message(TaskState.edit_index, F.text.regexp(r"^\d+$"))
async def get_task_index_for_edit(message: Message, state: FSMContext):
    task_index = int(message.text) - 1
    await state.update_data(task_index=task_index)

    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")
    await state.set_state(TaskState.edit_text)


@router.message(TaskState.edit_text)
async def edit_task_text(message: Message, state: FSMContext):
    from utils import edit_task
    data = await state.get_data()
    task_index = data.get("task_index")
    new_text = message.text.strip()

    if edit_task(message.from_user.id, task_index, new_text):
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

    await state.clear()